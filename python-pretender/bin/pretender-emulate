#!/usr/bin/env python
# Native
import argparse
import os
import pprint

from avatar2 import *

import logging

from pretender.logger import LogWriter
from pretender.bin_parser import M3Parser
from pretender.coverage import get_hit_blocks
from pretender.common import *
from pretender.hooks import *

import pretender.globals as G

logger = logging.getLogger(__name__)


def parse_args():
    # Default argument values
    sample = "firmware/Nucleo_blink_led.bin"
    openocd_conf = '/usr/share/openocd/scripts/board/st_nucleo_l1.cfg'
    output_dir = 'comparison_logs'
    qemu_executable = os.path.join(os.path.dirname(__file__),
                                   "../../avatar2-pretender/targets/build/qemu/arm-softmmu/qemu-system-arm")
    gdb_port = 1235
    qemu_port = 23454

    # Get user input
    parser = argparse.ArgumentParser()
    parser.add_argument("--board-config", help="Board config file YAML")
    parser.add_argument('--coverage', '-C', action='store_true',
                        help="Calculate block coverage from QEMU data")
    parser.add_argument('--proto', help="Select Avatar protocol to use",
                        choices=('openocd', 'gdb', 'jlink'),
                        default='openocd')
    parser.add_argument("--sample", "-s", default=sample,
                        help="Binary being analyzed.")
    parser.add_argument("--openocd_conf", "-c", default=openocd_conf,
                        help="OpenOCD config file.")
    # parser.add_argument("--output_dir", "-o", default=output_dir,
    #                     help="Output directory for logging.")
    parser.add_argument("--gdb_port", "-g", default=gdb_port,
                        help="GDB port number.")
    parser.add_argument('--serial', action='store_true',
                        help="Enable serial USART on port 5656")
    parser.add_argument('--max32_serial', action='store_true', help='Enable serial UART for Max32 on port 5656')
    parser.add_argument("--qemu_executable", "-x", default=qemu_executable,
                        help="QEMU Executable.")
    parser.add_argument("--qemu_port", "-q", default=qemu_port,
                        help="QEMU Port.")
    parser.add_argument("--debug", "-d", default=False, action='store_true',
                        help="QEMU Port.")
    parser.add_argument('--interrupts', '-I', action='store_true',
                        help="Enable interrupt recording mode via stub injection")
    parser.add_argument("--no-model", dest='no_model', action="store_true")
    parser.add_argument("--null-model", dest="null_model", action="store_true")
    
    parser.add_argument('--shell', help="Enable IPython shell",
                        action='store_true')
    parser.add_argument('--vomit', "-V", action='store_true',
                        help="Enable the vomit log from QEMU")
    parser.add_argument("--recording_dir", "-r", default="recording",
                        help="Directory containing pickled model.")
    parser.add_argument("--output_file", "-O", default="emulated_output.csv",
                        help="File to save recorded MMIO to.")
    parser.add_argument("--sleep_time", "-t", default=120,
                        help="Time to sleep before killing Avatar. [default: "
                             "120 s]")
    parser.add_argument("--old", action='store_true', default=False, help="Use the old-style model")
    args = parser.parse_args()
    args.output_dir = args.recording_dir
    args.memory_map = None
    args.partial_model = None

    # Do all of our checks!
    if not os.path.exists(args.sample):
        print("Sample file (%s) does not exist." % args.sample)
        sys.exit()

    if not os.path.exists(args.qemu_executable):
        print("QEMU executable (%s) does not exist." % args.qemu_executable)
        sys.exit()

    if not os.path.exists(args.recording_dir):
        l.error("Recording directory does not exist (%s)." %
                args.recording_dir)
        parser.print_help()
        sys.exit()

    return args


def set_emulate_hooks(avatar, args):
    # Monitor memory reads to forwarded MMIO
    # l.warning("Adding watchmen")
    avatar.watchmen.add_watchman('RemoteMemoryWrite', 'after',
                                 emulate_write_after)
    avatar.watchmen.add_watchman('RemoteMemoryRead', 'after',
                                 emulate_read_after)
    # avatar.watchmen.add_watchman('RemoteMemoryWrite', 'before',
    #                              print_write_before)
    # avatar.watchmen.add_watchman('RemoteMemoryRead', 'before',
    #                              print_read_before)
    if args.interrupts:
        #qemu.protocols.interrupts.enable_interrupts()
        avatar.enable_interrupts(None, qemu, semi_forwarding=True)
        l.info("Registering interrupt handlers")
        avatar.watchmen.add_watchman('RemoteInterruptEnter', 'after',
                                     emulate_interrupt_enter)
        avatar.watchmen.add_watchman('RemoteInterruptExit', 'after',
                                     emulate_interrupt_exit)
        # avatar.enable_interrupts(nucleo, qemu)


if __name__ == '__main__':
    args = parse_args()
    args = load_config(args)

    # Setup Logging
    logging.basicConfig()
    l = logging.getLogger()
    if args.debug:
        l.setLevel(logging.DEBUG)
    else:
        l.setLevel(logging.INFO)

    # Setup our binary parser
    # TODO: Abstract this.
    bin_parser = M3Parser(args.sample)

    # Let's setup avatar
    avatar = build_avatar(args, emulate=True)
    qemu = build_emulator(avatar, args)
    set_memory_map(avatar, args, model=True)


    # Init our targets
    l.warn("Init targets")
    avatar.init_targets()

    # Set our output file
    G.OUTPUT_TSV = LogWriter(os.path.join(args.recording_dir, args.output_file))
    set_emulate_hooks(avatar, args)

    qemu.regs.pc = bin_parser.get_entry_point()
    qemu.regs.sp = bin_parser.get_initial_sp()
    if 'ivt_address' in args.__dict__ and args.ivt_address:
        l.warning("Setting QEMU vector table base to %#08x" % args.ivt_address)
        qemu.protocols.interrupts.set_vector_table_base(args.ivt_address)
    if args.shell:
        import IPython;

        IPython.embed()
    else:

        qemu.cont()

        l.info("Running for a bit...")
        time.sleep(float(args.sleep_time))
        print("Time's up! Stopping everything")

    qemu.stop()
    print("Shutting down Avatar...")
    avatar.shutdown()
    if args.coverage:
        blocks = get_hit_blocks(G.COVERAGE_LOG)
        print "Hit blocks:", repr(blocks)
        print "Hit %d blocks" % len(blocks)
